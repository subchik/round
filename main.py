import os
import cv2
import numpy as np
from aiogram import Bot, types 
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from moviepy.editor import VideoFileClip
import tempfile
import yandex_music

MAX_VIDEO_SIZE = 14 * 1024 * 1024
MAX_GIF_SIZE = 10 * 1024 * 1024
TOKEN = "5946399214:AAE3GvKTkw4PcOYK3dSgIrGkeiW5GwzWEeM"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
parse_mode=types.ParseMode.HTML


#============–¢–ï–ö–°–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´============
@dp.message_handler(commands=['start'])
async def start_cmd_handler(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_video = types.KeyboardButton("–í–∏–¥–µ–æ")
    button_gif = types.KeyboardButton("GIF")
    button_sing = types.KeyboardButton("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
    keyboard.add(button_video)
    keyboard.add(button_gif)
    keyboard.add(button_sing)
    await message.answer(
"""–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

<b>–í–∏–¥–µ–æ</b> - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ –∫—Ä—É–∂–∫–∞
<b>GIF</b> - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∏—Ñ–∫–∏ –≤ –≤–∏–¥–µ –∫—Ä—É–∂–∫–∞
<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b> - –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Å–Ω–∏ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <b>/help</b>""", parse_mode="HTML", reply_markup=keyboard)

@dp.message_handler(commands=['help'])
async def start_cmd_handler(message: types.Message):
    await message.answer(f"""<b>@Video_and_round_bot</b>  ‚Äî —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π telegram –±–æ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Äå‚Äå‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Äå‚Äå‚îÅ‚îÅ
<u>‚ùóÔ∏è –í —á—ë–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∫—Ä—É–∂–æ—á–∫–∞: –º–µ–Ω—å—à–∏–π –≤–µ—Å —Ä–æ–ª–∏–∫–∞, –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–∞–∂–µ –ø—Ä–∏ —Å–ª–∞–±–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.</u>
    
<b>üì£ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</b>

> –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–æ–ª–∏–∫–∞ —Å —Ä–∞–∑–Ω—ã–π –ø–ª–∞—Ç—Ñ–æ—Ä–º. 
> –í—Å—Ç—Ä–æ–µ–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –≤–∏–¥–µ–æ.
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Äå‚Äå‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Äå‚Äå‚îÅ‚îÅ
<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>

<b>/start</b> - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.
<b>/help</b> - –û—Å—Ç–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã.
<b>/info</b> - –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ.
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Äå‚Äå‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚Äå‚Äå‚îÅ‚îÅ
<a href="https://t.me/Round_memes">–ö–∞–Ω–∞–ª –±–æ—Ç–∞</a>
""", parse_mode="HTML")

@dp.message_handler(commands=['info'])
async def start_cmd_handler(message: types.Message):
    await message.answer(f"""<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> <b>semechka#5942</b>

<b>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –±–∞–≥–∞–º:</b> <a href="kokosn002@gmail.com">–ø–æ—á—Ç–∞</a>

<b>–û –±–æ—Ç–µ:</b> –±–æ—Ç –±—ã–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ –º–µ—Å—è—Ü, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ —Ç–∞–∫ –∏ –≤ –≥—Ä—É–ø–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ""", parse_mode="HTML")

convert_counts = {
    'video': 0,
    'gif': 0
}

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã users_list
@dp.message_handler(commands=['user_list'])
async def users_list(message: types.Message):
    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ –∏ –≥–∏—Ñ–æ–∫
    video_count = convert_counts['video']
    gif_count = convert_counts['gif']
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ–∫:</b> {video_count}\n \n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ –≥–∏—Ñ–∫—É –≤ –∫—Ä—É–∂–æ–∫:</b> {gif_count}", parse_mode="HTML")

#============–û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û============
@dp.message_handler(lambda message: message.text == "–í–∏–¥–µ–æ")
async def send_video_handler(message: types.Message):
    keyboard = types.ReplyKeyboardRemove()
    await message.answer("–ü—Ä–∏—à–ª–∏ –º–Ω–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫—Ä—É–∂–æ–∫.\n \n<b>‚ùóÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 60 —Å–µ–∫. ‚ùóÔ∏è</b>", reply_markup=keyboard, parse_mode="HTML")

@dp.message_handler(content_types=types.ContentType.VIDEO)
async def video_handler(message: types.Message):
    with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp:
        file_info = await bot.get_file(message.video.file_id)
        file_size = file_info.file_size

        if file_size > MAX_VIDEO_SIZE:
            await bot.send_message(chat_id=message.chat.id, text="‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–µ—Å–∏—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–º–µ–Ω—å—à–∏—Ç–µ –≤–µ—Å –¥–æ 14 –º–±.")
            return
        
        if message.video.duration > 60:
            await bot.send_message(chat_id=message.chat.id, text="‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã.")
            return
        await bot.send_message(chat_id=message.chat.id, text="üìπ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

        with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as tmp_video_file:
            file_path = tmp_video_file.name
            await message.video.download(destination=file_path)

            video = cv2.VideoCapture(file_path)
            fps = int(video.get(cv2.CAP_PROP_FPS))
            frame_width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))
            frame_height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))

            if frame_width < 400:
                square_size = frame_width
            else:
                square_size = 400

            x = int((frame_width - square_size) / 2)
            y = int((frame_height - square_size) / 2)

            fourcc = cv2.VideoWriter_fourcc(*'mp4v')
            with tempfile.NamedTemporaryFile(suffix="_out.mp4", delete=False) as tmp_out_file:
                out_file_path = tmp_out_file.name
                out = cv2.VideoWriter(out_file_path, fourcc, fps, (square_size, square_size), isColor=True)

                while video.isOpened():
                    ret, frame = video.read()
                    if not ret:
                        break
                    square_frame = cv2.resize(frame, (square_size, square_size))
                    out.write(square_frame)

            video.release()
            del video
            out.release()
            cv2.destroyAllWindows()

            video_clip = VideoFileClip(out_file_path)
            audio_clip = VideoFileClip(file_path).audio
            video_clip = video_clip.set_audio(audio_clip)
            with tempfile.NamedTemporaryFile(suffix="_out_audio.mp4", delete=False) as tmp_final_file:
                final_file_path = tmp_final_file.name
                video_clip.write_videofile(final_file_path, fps=fps)

            video_clip.close()
            audio_clip.close()

            with open(final_file_path, "rb") as video_file:
                await bot.send_video_note(chat_id=message.chat.id, video_note=video_file)
                await bot.send_message(chat_id=message.chat.id, text="‚úÖ –ì–æ—Ç–æ–≤–æ")
            
            convert_counts['video'] += 1
    os.remove(temp.name)

#============–û–ë–†–ê–ë–û–¢–ö–ê GIF============
@dp.message_handler(lambda message: message.text == "GIF")
async def send_video_handler(message: types.Message):
    keyboard = types.ReplyKeyboardRemove()
    await message.answer("–ü—Ä–∏—à–ª–∏ –º–Ω–µ GIF, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.", reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.ANIMATION)
async def gif_handler(message: types.Message):
    file_info = await bot.get_file(message.document.file_id)
    file_size = file_info.file_size

    if file_size > MAX_GIF_SIZE:
        await bot.send_message(chat_id=message.chat.id, text="‚ö†Ô∏è GIF —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–µ—Å–∏—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–º–µ–Ω—å—à–∏—Ç–µ –≤–µ—Å –¥–æ 10 –º–±.")
        return

    await bot.send_message(chat_id=message.chat.id, text="üéûÔ∏è GIF –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

    file_path = f"gifs/{message.document.file_id}.mp4"
    await message.document.download(destination=file_path)

    video = cv2.VideoCapture(file_path)
    fps = int(video.get(cv2.CAP_PROP_FPS))
    frame_width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))

    if frame_width < 400:
        square_size = frame_width
    else:
        square_size = 400

    x = int((frame_width - square_size) / 2)
    y = int((frame_height - square_size) / 2)

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(f"gifs/{message.document.file_id}_out.mp4", fourcc, fps, (square_size, square_size), isColor=True)

    while video.isOpened():
        ret, frame = video.read()
        if not ret:
            break
        square_frame = cv2.resize(frame, (square_size, square_size))
        out.write(square_frame)

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    video.release()
    del video
    out.release()
    cv2.destroyAllWindows()

    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
    video_clip = VideoFileClip(f"gifs/{message.document.file_id}_out.mp4")
    audio_clip = None
    video_clip = video_clip.set_audio(audio_clip)
    video_clip.write_videofile(f"gifs/{message.document.file_id}_out_audio.mp4", fps=fps)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    out_file_path = f"gifs/{message.document.file_id}_out_audio.mp4"
    with open(out_file_path, "rb") as video_file:
        await bot.send_video_note(chat_id=message.chat.id, video_note=video_file)
        await bot.send_message(chat_id=message.chat.id, text="‚úÖ –ì–æ—Ç–æ–≤–æ")
    
    convert_counts['gif'] += 1
    # close video clips
    video_clip.close()

    # delete video files
    os.remove(f"gifs/{message.document.file_id}_out.mp4")
    os.remove(f"gifs/{message.document.file_id}_out_audio.mp4")
    os.remove(file_path)


#============–û–ë–†–ê–ë–û–¢–ö–ê –ú–£–ó–´–ö–ò –ü–û –ù–ê–ó–í–ê–ù–ò–Æ============
@dp.message_handler(lambda message: message.text == "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
async def send_video_handler(message: types.Message):
    keyboard = types.ReplyKeyboardRemove()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞.", reply_markup=keyboard)

def search_track(query):
    result = yandex_music.Client().search(query, type_='track')
    if result and result.tracks:
        track = result.tracks.results[0]
        title = track.title
        artists = ', '.join([a.name for a in track.artists])
        return title, artists
    else:
        return None

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(content_types=['text'])
async def text_handler(message: types.Message):
    query = message.text.strip()
    if not query:
        return
    if query.startswith('/'):
        return
    track = search_track(query)
    if track:
        title, artists = track
        await message.answer(f'üîä<b>–¢—Ä–µ–∫:</b> {title}\n<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {artists}', parse_mode="HTML")
    else:
        await message.answer('‚ùå–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')

#=======–¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã=======
@dp.message_handler(content_types=types.ContentTypes.AUDIO | types.ContentTypes.DOCUMENT | types.ContentTypes.PHOTO | types.ContentTypes.STICKER |types.ContentTypes.VOICE |types.ContentTypes.VIDEO_NOTE) #content_types=types.ContentTypes.AUDIO
async def handle_unsupported_content(message: types.Message):
    await message.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)